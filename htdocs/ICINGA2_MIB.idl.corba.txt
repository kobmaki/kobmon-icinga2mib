/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.8:
 *   smidump -f corba ICINGA2-MIB
 *
 * Derived from ICINGA2-MIB:
 *   ICINGA2 MIB, see also at REVISION=LAST-UPDATED
 *
 * Revision 2016-10-20 23:59:
 *   WIP, add base attributs.
 *
 * Revision 2015-12-25 00:01:
 *   initial version
 *
 * $Id$
 */

#ifndef _ICINGA2_MIB_IDL_
#define _ICINGA2_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <SNMPv2_SMI.idl>

module ICINGA2_MIB {

    typedef SNMPv2_SMI::Integer32Type Integer32Type;

    const string moduleIdentity = "icinga2";
    const ASN1_ObjectIdentifier icinga2 = "::ICINGA2_MIB::icinga2";

    /*
             ICINGA2 MIB, see also at REVISION=LAST-UPDATED

    LAST-UPDATED:   201610202359Z

    ORGANIZATION:
            "Uwe Ebel, koboldmaki"

    CONTACT-INFO:
            "Uwe Ebel"

    REVISION:       "201610202359Z"
    REVISION-DESCRIPTION:
            "WIP, add base attributs."

    REVISION:       "201512250001Z"
    REVISION-DESCRIPTION:
            "initial version"

    */

    /*
             Represent a false/true value.
    REFERENCE:
            "TODO"

    */
    typedef ASN1_Integer I2BooleanTCType; 
    const I2BooleanTCType I2BooleanTCType_false = 0;
    const I2BooleanTCType I2BooleanTCType_true = 1;
    const string I2BooleanTCType_NameNumberList = "false (0) , true (1)";

    /*
             Respresent a string.
    REFERENCE:
            "TODO"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2StringTCType; 

    /*
             Represent a unix timestamp
    REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/base/datetime.ti"

    DISPLAY-HINT: 30a


    */
    typedef ASN1_OctetString I2TimeStampTCType; 

    /*
             Something that is a name
    REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/base/configobject.ti"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2NameTCType; 

    /*
             Something that is the display name
    REFERENCE:
            "TODO"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2DisplayNameTCType; 

    /*
             What HA Mode is used.
    REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/base/configobject.ti"

    */
    typedef ASN1_Integer I2HaModeTCType; 
    const I2HaModeTCType I2HaModeTCType_haRunOnce = 0;
    const I2HaModeTCType I2HaModeTCType_haRunEverywhere = 1;
    const string I2HaModeTCType_NameNumberList = "haRunOnce (0) , haRunEverywhere (1)";

    /*
             Something that is the hostname (host_name)
    REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/icinga/host.ti"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2HostNameTCType; 

    /*
             Something that is the address of a host.
    REFERENCE:
            "TODO"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2AddressTCType; 

    /*
             Something that is the address (address6) of a host.
    REFERENCE:
            "TODO"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2Address6TCType; 

    /*
             Something that is check command name (check_command).
    REFERENCE:
            "TODO"

    DISPLAY-HINT: 127a


    */
    typedef ASN1_OctetString I2CheckCommandTCType; 

    /*
             Check interval in seconds
    REFERENCE:
            "TODO"

    DISPLAY-HINT: d


    */
    typedef ASN1_Integer I2CheckIntervalTCType; 

    /*
             Check timeout in seconds
    REFERENCE:
            "TODO"

    DISPLAY-HINT: d


    */
    typedef ASN1_Integer I2CheckTimeoutTCType; 

    /*
             Attempts, used in check, max attempt
    REFERENCE:
            "TODO"

    DISPLAY-HINT: d


    */
    typedef ASN1_Integer I2AttemptTCType; 

    typedef ASN1_Integer I2ObjectTypeType; 
    const I2ObjectTypeType I2ObjectTypeType_object = 0;
    const I2ObjectTypeType I2ObjectTypeType_host = 1;
    const I2ObjectTypeType I2ObjectTypeType_service = 2;
    const I2ObjectTypeType I2ObjectTypeType_hostgroup = 3;
    const I2ObjectTypeType I2ObjectTypeType_servicegroup = 4;
    const I2ObjectTypeType I2ObjectTypeType_hostescalation = 5;
    const I2ObjectTypeType I2ObjectTypeType_serviceescalation = 6;
    const I2ObjectTypeType I2ObjectTypeType_hostdependency = 7;
    const I2ObjectTypeType I2ObjectTypeType_servicedependency = 8;
    const I2ObjectTypeType I2ObjectTypeType_timeperiod = 9;
    const I2ObjectTypeType I2ObjectTypeType_contact = 10;
    const I2ObjectTypeType I2ObjectTypeType_contactgroup = 11;
    const I2ObjectTypeType I2ObjectTypeType_command = 12;
    const I2ObjectTypeType I2ObjectTypeType_endpoint = 13;
    const I2ObjectTypeType I2ObjectTypeType_zone = 14;
    const string I2ObjectTypeType_NameNumberList = "object (0) , host (1) , service (2) , hostgroup (3) , servicegroup (4) , hostescalation (5) , serviceescalation (6) , hostdependency (7) , servicedependency (8) , timeperiod (9) , contact (10) , contactgroup (11) , command (12) , endpoint (13) , zone (14)";

    typedef ASN1_Integer I2StateTypeType; 
    const I2StateTypeType I2StateTypeType_stateTypeSoft = 0;
    const I2StateTypeType I2StateTypeType_stateTypeHard = 1;
    const string I2StateTypeType_NameNumberList = "stateTypeSoft (0) , stateTypeHard (1)";

    typedef ASN1_Integer I2StateHostType; 
    const I2StateHostType I2StateHostType_hostUp = 0;
    const I2StateHostType I2StateHostType_hostDown = 1;
    const string I2StateHostType_NameNumberList = "hostUp (0) , hostDown (1)";

    typedef ASN1_Integer I2StateServiceType; 
    const I2StateServiceType I2StateServiceType_serviceOK = 0;
    const I2StateServiceType I2StateServiceType_serviceWarning = 1;
    const I2StateServiceType I2StateServiceType_serviceCritical = 2;
    const I2StateServiceType I2StateServiceType_serviceUnknown = 3;
    const string I2StateServiceType_NameNumberList = "serviceOK (0) , serviceWarning (1) , serviceCritical (2) , serviceUnknown (3)";

    typedef ASN1_Integer I2NotificationTypeType; 
    const I2NotificationTypeType I2NotificationTypeType_undefined = 0;
    const I2NotificationTypeType I2NotificationTypeType_downtimeStart = 1;
    const I2NotificationTypeType I2NotificationTypeType_downtimeEnd = 2;
    const I2NotificationTypeType I2NotificationTypeType_downtimeRemoved = 3;
    const I2NotificationTypeType I2NotificationTypeType_custom = 4;
    const I2NotificationTypeType I2NotificationTypeType_acknowledgement = 5;
    const I2NotificationTypeType I2NotificationTypeType_problem = 6;
    const I2NotificationTypeType I2NotificationTypeType_recovery = 7;
    const I2NotificationTypeType I2NotificationTypeType_flappingStart = 8;
    const I2NotificationTypeType I2NotificationTypeType_flappingEnd = 9;
    const string I2NotificationTypeType_NameNumberList = "undefined (0) , downtimeStart (1) , downtimeEnd (2) , downtimeRemoved (3) , custom (4) , acknowledgement (5) , problem (6) , recovery (7) , flappingStart (8) , flappingEnd (9)";

    interface i2ObjectAttributes : SNMPMgmt::SmiEntry {

        /*
             Notfication type
        */
        attribute I2NotificationTypeType i2NotificationType;
    };

    interface i2GenericAttribute : SNMPMgmt::SmiEntry {

        /*
             Objecttype, id mapping type
        */
        attribute I2ObjectTypeType i2ObjectType;

        /*
             Name of a service,host, etc.
        */
        attribute I2NameTCType i2Name;

        /*
             State type, could be soft or hard.
        */
        attribute I2StateTypeType i2StateType;

        /*
             Display name
        */
        attribute I2DisplayNameTCType i2DisplayName;

        /*
             Notes in an Object
        */
        readonly attribute I2StringTCType i2Notes;

        /*
             URL to a notes
        */
        readonly attribute I2StringTCType i2NotesUrl;

        /*
             An output from a check
        */
        readonly attribute I2StringTCType i2Output;

        /*
             Check command name
        */
        readonly attribute I2CheckCommandTCType i2CheckCommand;

        /*
             Check heck timestamp
        */
        readonly attribute I2AttemptTCType i2CheckAttempt;

        /*
             Enable active checks?
        */
        readonly attribute I2BooleanTCType i2EnableActiveChecks;

        /*
             Is event handler enabled?
        */
        readonly attribute I2BooleanTCType i2EnableEventHandler;

        /*
             Is flapping detection enabled?
        */
        readonly attribute I2BooleanTCType i2EnableFlapping;

        /*
             Is notification enabled?
        */
        readonly attribute I2BooleanTCType i2EnableNotfications;

        /*
             Are passive checks allowed?
        */
        readonly attribute I2BooleanTCType i2EnablePassiveCheck;

        /*
             Is writing of perfdata active?
        */
        readonly attribute I2BooleanTCType i2EnablePerfdata;

        /*
             Is active? Used e.g. zone, endpoint
        */
        readonly attribute I2BooleanTCType i2Active;

        /*
             Is global? Used e.g. zone, endpoint
        */
        readonly attribute I2BooleanTCType i2Global;

        /*
             Address in that resolves to an IPv4
        */
        readonly attribute I2AddressTCType i2Address;

        /*
             Address in that resolves to an IPv6
        */
        readonly attribute I2Address6TCType i2Address6;

        /*
             Name of the parent
        */
        readonly attribute I2StringTCType i2Parent;

        /*
             Ha Mode
        */
        readonly attribute I2BooleanTCType i2HaMode;

        /*
             Last check timestamp
        */
        readonly attribute I2TimeStampTCType i2LastCheck;

        /*
             Check interval
        */
        readonly attribute I2CheckIntervalTCType i2CheckInterval;

        /*
             Name of the period.
        */
        readonly attribute I2StringTCType i2CheckPeriod;
    };

    interface i2HostAttributes : SNMPMgmt::SmiEntry {

        /*
             Hostname
        */
        attribute I2HostNameTCType i2HostName;

        /*
             Host state
        */
        readonly attribute I2StateHostType i2StateHost;
    };

    interface i2ServiceAttributes : SNMPMgmt::SmiEntry {

        /*
             Name of the service
        */
        attribute I2StringTCType i2ServiceName;

        /*
             Service state
        */
        attribute I2StateServiceType i2StateService;
    };

    interface i2UserAttributes : SNMPMgmt::SmiEntry {

        /*
             Pager
        */
        attribute I2StringTCType i2UserPager;
    };

    interface i2EndpointAttributes : SNMPMgmt::SmiEntry {

        /*
             Endpoint name
        */
        attribute I2StringTCType i2EndpointName;
    };

    interface i2ZoneAttributes : SNMPMgmt::SmiEntry {

        /*
             Zone name
        */
        attribute I2StringTCType i2ZoneName;
    };

    struct I2NotificationTypeVBType {
        string var_name;
        string var_index;
        I2NotificationTypeType i2NotificationType;
    };

    struct I2ObjectTypeVBType {
        string var_name;
        string var_index;
        I2ObjectTypeType i2ObjectType;
    };

    struct I2StateHostVBType {
        string var_name;
        string var_index;
        I2StateHostType i2StateHost;
    };

    struct I2HostNameVBType {
        string var_name;
        string var_index;
        I2HostNameTCType i2HostName;
    };

    struct I2DisplayNameVBType {
        string var_name;
        string var_index;
        I2DisplayNameTCType i2DisplayName;
    };

    struct I2StateServiceVBType {
        string var_name;
        string var_index;
        I2StateServiceType i2StateService;
    };

    struct I2ServiceNameVBType {
        string var_name;
        string var_index;
        I2StringTCType i2ServiceName;
    };

    struct I2EndpointNameVBType {
        string var_name;
        string var_index;
        I2StringTCType i2EndpointName;
    };

    struct I2NameVBType {
        string var_name;
        string var_index;
        I2NameTCType i2Name;
    };

    struct I2NotificationHostType {
        I2NotificationTypeVBType i2NotificationType;
        I2ObjectTypeVBType i2ObjectType;
        I2StateHostVBType i2StateHost;
        I2HostNameVBType i2HostName;
        I2DisplayNameVBType i2DisplayName;
    };

    struct I2NotificationServiceType {
        I2NotificationTypeVBType i2NotificationType;
        I2ObjectTypeVBType i2ObjectType;
        I2StateServiceVBType i2StateService;
        I2ServiceNameVBType i2ServiceName;
        I2DisplayNameVBType i2DisplayName;
        I2HostNameVBType i2HostName;
    };

    struct I2NotificationEndpointType {
        I2NotificationTypeVBType i2NotificationType;
        I2ObjectTypeVBType i2ObjectType;
        I2EndpointNameVBType i2EndpointName;
    };

    struct I2NotificationGenericType {
        I2NotificationTypeVBType i2NotificationType;
        I2ObjectTypeVBType i2ObjectType;
        I2NameVBType i2Name;
    };

    /* typed push event communication */
    interface Notifications : SNMPMgmt::Notifications {

        /*
             Host trap
        */
        void i2NotificationHost (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationHostType notification_info
        );

        /*
             Service trap
        */
        void i2NotificationService (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationServiceType notification_info
        );

        /*
             Endpoint Trap
        */
        void i2NotificationEndpoint (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationEndpointType notification_info
        );

        /*
             Generic Icinga2 Notfication
        */
        void i2NotificationGeneric (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationGenericType notification_info
        );
    };

    /* typed pull event communication */
    interface PullNotifications : SNMPMgmt::PullNotifications {

        /*
             Host trap
        */
        void pull_i2NotificationHost (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationHostType notification_info
        );
        boolean try_i2NotificationHost (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationHostType notification_info
        );

        /*
             Service trap
        */
        void pull_i2NotificationService (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationServiceType notification_info
        );
        boolean try_i2NotificationService (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationServiceType notification_info
        );

        /*
             Endpoint Trap
        */
        void pull_i2NotificationEndpoint (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationEndpointType notification_info
        );
        boolean try_i2NotificationEndpoint (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationEndpointType notification_info
        );

        /*
             Generic Icinga2 Notfication
        */
        void pull_i2NotificationGeneric (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationGenericType notification_info
        );
        boolean try_i2NotificationGeneric (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationGenericType notification_info
        );
    };

    interface SmiEntryFactory : SNMPMgmt::GenericFactory {

        i2ObjectAttributes create_i2ObjectAttributes (
            in I2NotificationTypeType i2NotificationType
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2GenericAttribute create_i2GenericAttribute (
            in I2ObjectTypeType i2ObjectType,
            in I2NameTCType i2Name,
            in I2StateTypeType i2StateType,
            in I2DisplayNameTCType i2DisplayName
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2HostAttributes create_i2HostAttributes (
            in I2HostNameTCType i2HostName
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2ServiceAttributes create_i2ServiceAttributes (
            in I2StringTCType i2ServiceName,
            in I2StateServiceType i2StateService
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2UserAttributes create_i2UserAttributes (
            in I2StringTCType i2UserPager
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2EndpointAttributes create_i2EndpointAttributes (
            in I2StringTCType i2EndpointName
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );

        i2ZoneAttributes create_i2ZoneAttributes (
            in I2StringTCType i2ZoneName
        ) raises (
            SNMPMgmt::AlreadyExists,
            CosLifeCycle::InvalidCriteria,
            CosLifeCycle::CannotMeetCriteria
        );
    };

    /* pseudo */
    interface TextualConventions {

        /*
             Respresent a string.
        REFERENCE:
            "TODO"        DISPLAY-HINT: 127a
        */
        string I2StringTCToString (in I2StringTCType Value);
        I2StringTCType I2StringTCFromString (in string str);

        /*
             Represent a unix timestamp
        REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/base/datetime.ti"        DISPLAY-HINT: 30a
        */
        string I2TimeStampTCToString (in I2TimeStampTCType Value);
        I2TimeStampTCType I2TimeStampTCFromString (in string str);

        /*
             Something that is a name
        REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/base/configobject.ti"        DISPLAY-HINT: 127a
        */
        string I2NameTCToString (in I2NameTCType Value);
        I2NameTCType I2NameTCFromString (in string str);

        /*
             Something that is the display name
        REFERENCE:
            "TODO"        DISPLAY-HINT: 127a
        */
        string I2DisplayNameTCToString (in I2DisplayNameTCType Value);
        I2DisplayNameTCType I2DisplayNameTCFromString (in string str);

        /*
             Something that is the hostname (host_name)
        REFERENCE:
            "https://github.com/Icinga/icinga2/blob/master/lib/icinga/host.ti"        DISPLAY-HINT: 127a
        */
        string I2HostNameTCToString (in I2HostNameTCType Value);
        I2HostNameTCType I2HostNameTCFromString (in string str);

        /*
             Something that is the address of a host.
        REFERENCE:
            "TODO"        DISPLAY-HINT: 127a
        */
        string I2AddressTCToString (in I2AddressTCType Value);
        I2AddressTCType I2AddressTCFromString (in string str);

        /*
             Something that is the address (address6) of a host.
        REFERENCE:
            "TODO"        DISPLAY-HINT: 127a
        */
        string I2Address6TCToString (in I2Address6TCType Value);
        I2Address6TCType I2Address6TCFromString (in string str);

        /*
             Something that is check command name (check_command).
        REFERENCE:
            "TODO"        DISPLAY-HINT: 127a
        */
        string I2CheckCommandTCToString (in I2CheckCommandTCType Value);
        I2CheckCommandTCType I2CheckCommandTCFromString (in string str);

        /*
             Check interval in seconds
        REFERENCE:
            "TODO"        DISPLAY-HINT: d
        */
        string I2CheckIntervalTCToString (in I2CheckIntervalTCType Value);
        I2CheckIntervalTCType I2CheckIntervalTCFromString (in string str);

        /*
             Check timeout in seconds
        REFERENCE:
            "TODO"        DISPLAY-HINT: d
        */
        string I2CheckTimeoutTCToString (in I2CheckTimeoutTCType Value);
        I2CheckTimeoutTCType I2CheckTimeoutTCFromString (in string str);

        /*
             Attempts, used in check, max attempt
        REFERENCE:
            "TODO"        DISPLAY-HINT: d
        */
        string I2AttemptTCToString (in I2AttemptTCType Value);
        I2AttemptTCType I2AttemptTCFromString (in string str);
    };

};

#endif /* !_ICINGA2_MIB_IDL_ */
