/*							-- DO NOT EDIT --
 * Generated by smidump version 0.4.8:
 *   smidump -f corba ICINGA-ICINGA2-MIB
 *
 * Derived from ICINGA-ICINGA2-MIB:
 *   ICINGA2 MIB, see also at REVISION=LAST-UPDATED
 *
 * Revision 2016-10-20 23:59:
 *   WIP, add base attributs.
 *
 * Revision 2015-12-25 00:01:
 *   initial version
 *
 * $Id$
 */

#ifndef _ICINGA_ICINGA2_MIB_IDL_
#define _ICINGA_ICINGA2_MIB_IDL_

#include <ASN1Types.idl>
#include <SNMPMgmt.idl>
#include <ICINGA_TC_MIB.idl>
#include <SNMPv2_SMI.idl>

module ICINGA_ICINGA2_MIB {

    typedef ICINGA_TC_MIB::I2Address6TCType I2Address6TCType;
    typedef ICINGA_TC_MIB::I2AddressTCType I2AddressTCType;
    typedef ICINGA_TC_MIB::I2AttemptTCType I2AttemptTCType;
    typedef ICINGA_TC_MIB::I2BooleanTCType I2BooleanTCType;
    typedef ICINGA_TC_MIB::I2CheckCommandTCType I2CheckCommandTCType;
    typedef ICINGA_TC_MIB::I2CheckIntervalTCType I2CheckIntervalTCType;
    typedef ICINGA_TC_MIB::I2DisplayNameTCType I2DisplayNameTCType;
    typedef ICINGA_TC_MIB::I2HostNameTCType I2HostNameTCType;
    typedef ICINGA_TC_MIB::I2NameTCType I2NameTCType;
    typedef ICINGA_TC_MIB::I2StringTCType I2StringTCType;
    typedef ICINGA_TC_MIB::I2TimeStampTCType I2TimeStampTCType;
    typedef SNMPv2_SMI::Integer32Type Integer32Type;

    const string moduleIdentity = "icinga2";
    const ASN1_ObjectIdentifier icinga2 = "::ICINGA_ICINGA2_MIB::icinga2";

    /*
             ICINGA2 MIB, see also at REVISION=LAST-UPDATED

    LAST-UPDATED:   201610202359Z

    ORGANIZATION:
            "Uwe Ebel, koboldmaki"

    CONTACT-INFO:
            "Uwe Ebel"

    REVISION:       "201610202359Z"
    REVISION-DESCRIPTION:
            "WIP, add base attributs."

    REVISION:       "201512250001Z"
    REVISION-DESCRIPTION:
            "initial version"

    */

    typedef ASN1_Integer I2ObjectTypeType; 
    const I2ObjectTypeType I2ObjectTypeType_object = 0;
    const I2ObjectTypeType I2ObjectTypeType_host = 1;
    const I2ObjectTypeType I2ObjectTypeType_service = 2;
    const I2ObjectTypeType I2ObjectTypeType_hostgroup = 3;
    const I2ObjectTypeType I2ObjectTypeType_servicegroup = 4;
    const I2ObjectTypeType I2ObjectTypeType_hostescalation = 5;
    const I2ObjectTypeType I2ObjectTypeType_serviceescalation = 6;
    const I2ObjectTypeType I2ObjectTypeType_hostdependency = 7;
    const I2ObjectTypeType I2ObjectTypeType_servicedependency = 8;
    const I2ObjectTypeType I2ObjectTypeType_timeperiod = 9;
    const I2ObjectTypeType I2ObjectTypeType_contact = 10;
    const I2ObjectTypeType I2ObjectTypeType_contactgroup = 11;
    const I2ObjectTypeType I2ObjectTypeType_command = 12;
    const I2ObjectTypeType I2ObjectTypeType_endpoint = 13;
    const I2ObjectTypeType I2ObjectTypeType_zone = 14;
    const string I2ObjectTypeType_NameNumberList = "object (0) , host (1) , service (2) , hostgroup (3) , servicegroup (4) , hostescalation (5) , serviceescalation (6) , hostdependency (7) , servicedependency (8) , timeperiod (9) , contact (10) , contactgroup (11) , command (12) , endpoint (13) , zone (14)";

    typedef ASN1_Integer I2StateTypeType; 
    const I2StateTypeType I2StateTypeType_stateTypeSoft = 0;
    const I2StateTypeType I2StateTypeType_stateTypeHard = 1;
    const string I2StateTypeType_NameNumberList = "stateTypeSoft (0) , stateTypeHard (1)";

    typedef ASN1_Integer I2StateHostType; 
    const I2StateHostType I2StateHostType_hostUp = 0;
    const I2StateHostType I2StateHostType_hostDown = 1;
    const I2StateHostType I2StateHostType_hostUnreachable = 2;
    const I2StateHostType I2StateHostType_hostPending = 3;
    const string I2StateHostType_NameNumberList = "hostUp (0) , hostDown (1) , hostUnreachable (2) , hostPending (3)";

    typedef ASN1_Integer I2StateServiceType; 
    const I2StateServiceType I2StateServiceType_serviceOK = 0;
    const I2StateServiceType I2StateServiceType_serviceWarning = 1;
    const I2StateServiceType I2StateServiceType_serviceCritical = 2;
    const I2StateServiceType I2StateServiceType_serviceUnknown = 3;
    const string I2StateServiceType_NameNumberList = "serviceOK (0) , serviceWarning (1) , serviceCritical (2) , serviceUnknown (3)";

    typedef ASN1_Integer I2NotificationTypeType; 
    const I2NotificationTypeType I2NotificationTypeType_undefined = 0;
    const I2NotificationTypeType I2NotificationTypeType_downtimeStart = 1;
    const I2NotificationTypeType I2NotificationTypeType_downtimeEnd = 2;
    const I2NotificationTypeType I2NotificationTypeType_downtimeRemoved = 3;
    const I2NotificationTypeType I2NotificationTypeType_custom = 4;
    const I2NotificationTypeType I2NotificationTypeType_acknowledgement = 5;
    const I2NotificationTypeType I2NotificationTypeType_problem = 6;
    const I2NotificationTypeType I2NotificationTypeType_recovery = 7;
    const I2NotificationTypeType I2NotificationTypeType_flappingStart = 8;
    const I2NotificationTypeType I2NotificationTypeType_flappingEnd = 9;
    const string I2NotificationTypeType_NameNumberList = "undefined (0) , downtimeStart (1) , downtimeEnd (2) , downtimeRemoved (3) , custom (4) , acknowledgement (5) , problem (6) , recovery (7) , flappingStart (8) , flappingEnd (9)";

    typedef ASN1_Integer I2DaemonStatusType; 
    const I2DaemonStatusType I2DaemonStatusType_up = 0;
    const I2DaemonStatusType I2DaemonStatusType_down = 1;
    const string I2DaemonStatusType_NameNumberList = "up (0) , down (1)";

    typedef ASN1_Integer I2ClusterStatusType; 
    const I2ClusterStatusType I2ClusterStatusType_up = 0;
    const I2ClusterStatusType I2ClusterStatusType_down = 1;
    const I2ClusterStatusType I2ClusterStatusType_nocluster = 2;
    const string I2ClusterStatusType_NameNumberList = "up (0) , down (1) , nocluster (2)";

    interface i2ObjectAttributes : SNMPMgmt::SmiEntry {

        /*
             Notfication type
        */
        readonly attribute I2NotificationTypeType i2NotificationType;
    };

    interface i2GenericAttribute : SNMPMgmt::SmiEntry {

        /*
             Objecttype, id mapping type
        */
        readonly attribute I2ObjectTypeType i2ObjectType;

        /*
             Name of a service,host, etc.
        */
        readonly attribute I2NameTCType i2Name;

        /*
             State type, could be soft or hard.
        */
        readonly attribute I2StateTypeType i2StateType;

        /*
             Display name
        */
        readonly attribute I2DisplayNameTCType i2DisplayName;

        /*
             Notes in an Object
        */
        readonly attribute I2StringTCType i2Notes;

        /*
             URL to a notes
        */
        readonly attribute I2StringTCType i2NotesUrl;

        /*
             An output from a check
        */
        readonly attribute I2StringTCType i2Output;

        /*
             Check command name
        */
        readonly attribute I2CheckCommandTCType i2CheckCommand;

        /*
             Check attempts
        */
        readonly attribute I2AttemptTCType i2CheckAttempt;

        /*
             Enable active checks?
        */
        readonly attribute I2BooleanTCType i2EnableActiveChecks;

        /*
             Is event handler enabled?
        */
        readonly attribute I2BooleanTCType i2EnableEventHandler;

        /*
             Is flapping detection enabled?
        */
        readonly attribute I2BooleanTCType i2EnableFlapping;

        /*
             Is notification enabled?
        */
        readonly attribute I2BooleanTCType i2EnableNotfications;

        /*
             Are passive checks allowed?
        */
        readonly attribute I2BooleanTCType i2EnablePassiveCheck;

        /*
             Is writing of perfdata active?
        */
        readonly attribute I2BooleanTCType i2EnablePerfdata;

        /*
             Is active? Used e.g. zone, endpoint
        */
        readonly attribute I2BooleanTCType i2Active;

        /*
             Is global? Used e.g. zone, endpoint
        */
        readonly attribute I2BooleanTCType i2Global;

        /*
             Address in that resolves to an IPv4
        */
        readonly attribute I2AddressTCType i2Address;

        /*
             Address in that resolves to an IPv6
        */
        readonly attribute I2Address6TCType i2Address6;

        /*
             Name of the parent
        */
        readonly attribute I2StringTCType i2Parent;

        /*
             Ha Mode
        */
        readonly attribute I2BooleanTCType i2HaMode;

        /*
             Last check timestamp
        */
        readonly attribute I2TimeStampTCType i2LastCheck;

        /*
             Check interval
        */
        readonly attribute I2CheckIntervalTCType i2CheckInterval;

        /*
             Name of the period.
        */
        readonly attribute I2StringTCType i2CheckPeriod;
    };

    interface i2HostAttributes : SNMPMgmt::SmiEntry {

        /*
             Hostname
        */
        readonly attribute I2HostNameTCType i2HostName;

        /*
             Host state, up/down. The additional state unreachable/pending was grab from icingaweb2, modules/monitoring/application/controllers/HealthController.php
        */
        readonly attribute I2StateHostType i2StateHost;
    };

    interface i2ServiceAttributes : SNMPMgmt::SmiEntry {

        /*
             Name of the service
        */
        readonly attribute I2StringTCType i2ServiceName;

        /*
             Service state
        */
        readonly attribute I2StateServiceType i2StateService;
    };

    interface i2UserAttributes : SNMPMgmt::SmiEntry {

        /*
             Pager
        */
        readonly attribute I2StringTCType i2UserPager;
    };

    interface i2EndpointAttributes : SNMPMgmt::SmiEntry {

        /*
             Endpoint name
        */
        readonly attribute I2StringTCType i2EndpointName;
    };

    interface i2ZoneAttributes : SNMPMgmt::SmiEntry {

        /*
             Zone name
        */
        readonly attribute I2StringTCType i2ZoneName;
    };

    interface icinga2Status : SNMPMgmt::SmiEntry {

        /*
             Status of the icinga2 daemon. Indicates if the daemon is up or down.
        */
        readonly attribute I2DaemonStatusType i2DaemonStatus;

        /*
             Status of the cluster
        */
        readonly attribute I2ClusterStatusType i2ClusterStatus;
    };

    struct I2HostNameVBType {
        string var_name;
        string var_index;
        I2HostNameTCType i2HostName;
    };

    struct I2DisplayNameVBType {
        string var_name;
        string var_index;
        I2DisplayNameTCType i2DisplayName;
    };

    struct I2StateHostVBType {
        string var_name;
        string var_index;
        I2StateHostType i2StateHost;
    };

    struct I2OutputVBType {
        string var_name;
        string var_index;
        I2StringTCType i2Output;
    };

    struct I2EndpointNameVBType {
        string var_name;
        string var_index;
        I2StringTCType i2EndpointName;
    };

    struct I2ServiceNameVBType {
        string var_name;
        string var_index;
        I2StringTCType i2ServiceName;
    };

    struct I2StateServiceVBType {
        string var_name;
        string var_index;
        I2StateServiceType i2StateService;
    };

    struct I2NotificationTypeVBType {
        string var_name;
        string var_index;
        I2NotificationTypeType i2NotificationType;
    };

    struct I2ObjectTypeVBType {
        string var_name;
        string var_index;
        I2ObjectTypeType i2ObjectType;
    };

    struct I2NameVBType {
        string var_name;
        string var_index;
        I2NameTCType i2Name;
    };

    struct I2NotificationHostType {
        I2HostNameVBType i2HostName;
        I2DisplayNameVBType i2DisplayName;
        I2StateHostVBType i2StateHost;
        I2OutputVBType i2Output;
        I2EndpointNameVBType i2EndpointName;
    };

    struct I2NotificationServiceType {
        I2ServiceNameVBType i2ServiceName;
        I2DisplayNameVBType i2DisplayName;
        I2StateServiceVBType i2StateService;
        I2OutputVBType i2Output;
        I2EndpointNameVBType i2EndpointName;
        I2HostNameVBType i2HostName;
    };

    struct I2NotificationEndpointType {
        I2EndpointNameVBType i2EndpointName;
        I2DisplayNameVBType i2DisplayName;
    };

    struct I2NotificationGenericType {
        I2NotificationTypeVBType i2NotificationType;
        I2ObjectTypeVBType i2ObjectType;
        I2NameVBType i2Name;
        I2DisplayNameVBType i2DisplayName;
        I2OutputVBType i2Output;
        I2EndpointNameVBType i2EndpointName;
    };

    /* typed push event communication */
    interface Notifications : SNMPMgmt::Notifications {

        /*
             Host trap
        REFERENCE:
            "TODO"

        */
        void i2NotificationHost (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationHostType notification_info
        );

        /*
             Service trap
        REFERENCE:
            "TODO"

        */
        void i2NotificationService (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationServiceType notification_info
        );

        /*
             Endpoint Trap
        REFERENCE:
            "TODO"

        */
        void i2NotificationEndpoint (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationEndpointType notification_info
        );

        /*
             Generic Icinga2 Notfication %s (%s), for %s (%s)
        REFERENCE:
            "TODO"

        */
        void i2NotificationGeneric (
            in CosNaming::Name src_entry_name,
            in CORBA::ScopedName event_type,
            in ASN1_GeneralizedTime event_time,
            in I2NotificationGenericType notification_info
        );
    };

    /* typed pull event communication */
    interface PullNotifications : SNMPMgmt::PullNotifications {

        /*
             Host trap
        REFERENCE:
            "TODO"

        */
        void pull_i2NotificationHost (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationHostType notification_info
        );
        boolean try_i2NotificationHost (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationHostType notification_info
        );

        /*
             Service trap
        REFERENCE:
            "TODO"

        */
        void pull_i2NotificationService (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationServiceType notification_info
        );
        boolean try_i2NotificationService (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationServiceType notification_info
        );

        /*
             Endpoint Trap
        REFERENCE:
            "TODO"

        */
        void pull_i2NotificationEndpoint (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationEndpointType notification_info
        );
        boolean try_i2NotificationEndpoint (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationEndpointType notification_info
        );

        /*
             Generic Icinga2 Notfication %s (%s), for %s (%s)
        REFERENCE:
            "TODO"

        */
        void pull_i2NotificationGeneric (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationGenericType notification_info
        );
        boolean try_i2NotificationGeneric (
            out CosNaming::Name src_entry_name,
            out CORBA::ScopedName event_type,
            out ASN1_GeneralizedTime event_time,
            out I2NotificationGenericType notification_info
        );
    };

};

#endif /* !_ICINGA_ICINGA2_MIB_IDL_ */
